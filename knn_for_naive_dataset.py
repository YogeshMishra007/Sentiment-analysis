# -*- coding: utf-8 -*-
"""Knn for Naive dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zN7Yg56OA_6ixye1Sa0vSf2F2zATD-j1
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer

# from google.colab import drive
# drive.mount('/content/drive')

# Load the training and test datasets
train_data = pd.read_csv('/content/Corona_NLP_train.csv', encoding='latin1')
test_data = pd.read_csv('/content/Corona_NLP_train.csv', encoding='latin1')

# Drop unnecessary columns
train_data = train_data[['OriginalTweet', 'Sentiment']]
test_data = test_data[['OriginalTweet', 'Sentiment']]

# Handle missing values
train_data.dropna(inplace=True)
test_data.dropna(inplace=True)

train_data['OriginalTweet'] = train_data['OriginalTweet']
test_data['OriginalTweet'] = test_data['OriginalTweet']

# Split the data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(train_data['OriginalTweet'], train_data['Sentiment'], test_size=0.2, random_state=42)

# Create TF-IDF vectorizer
vectorizer = TfidfVectorizer()

# Convert text to vectors
X_train_vectors = vectorizer.fit_transform(X_train)
X_val_vectors = vectorizer.transform(X_val)
X_test_vectors = vectorizer.transform(test_data['OriginalTweet'])

# Handle missing values in the test dataset (if any)
imputer = SimpleImputer(strategy='most_frequent')
y_train = imputer.fit_transform(y_train.values.reshape(-1, 1)).ravel()

# Implement k-Nearest Neighbors (kNN) algorithm
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train_vectors, y_train)

# Predict using kNN
y_pred_knn = knn.predict(X_val_vectors)

# Calculate accuracy for kNN
accuracy_knn = accuracy_score(y_val, y_pred_knn)
print("Accuracy (kNN):", accuracy_knn)


# Predict using the test dataset
y_pred_test_knn = knn.predict(X_test_vectors)


# Print the predicted sentiments for the test dataset
print("Predicted sentiments (kNN):", y_pred_test_knn)